#version 430
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba16f, binding = 0) uniform image2D img_output;

uniform sampler2D inputTex;
uniform float weight[6] = float[] (1, 0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);

float sizeFactor = 1.0f;

void main()
{
	// base pixel colour for image
	vec4 outputPixel = vec4(1.0, 0.0, 0.0, 1.0);
	// get index in global work group i.e x,y position
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

	ivec2 texSize = textureSize(inputTex, 0);
	vec2 texCoordinates = pixel_coords / texSize;

  
	// Bloom algorithm.
	vec3 texColor = texture(inputTex, texCoordinates).rgb;
	outputPixel = vec4(texColor, 1);

	vec2 tex_offset = sizeFactor / texSize; // gets size of single texel

	for(int i = -5; i < 6; ++i)
	{
		for(int j = -5; j < 6; ++j)
		{
			if(i != 0 || j != 0)
			{
				vec3 fetchedColor = texture(inputTex, texCoordinates + vec2(tex_offset.x * i, tex_offset.y * j)).rgb;
				//color.rgb += fetchedColor * weight[abs(i)] * weight[abs(j)] * 0.5f;
				outputPixel.rgb += (fetchedColor * pow(abs(length(fetchedColor) - 0.8f), 1.0f))  / 100;
			}
		}
	}

	outputPixel.r = 1;
  
  // output to a specific pixel in the image
  imageStore(img_output, pixel_coords, outputPixel);
}